#!/bin/bash

set -e

if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Ошибка: Укажите действие (update или deploy) и среду (dev или prod)"
  exit 1
fi

ACTION=$1
ENV=$2
K8S_DIR="k8s"
MANIFESTS_DIR="$K8S_DIR/$ENV/manifests"
CLUSTER_NAME="weaviate-cluster-$ENV"
REGION=${AWS_REGION:-$(aws configure get region)}
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

if [[ ! -d "$MANIFESTS_DIR" ]]; then
  echo "Ошибка: Директория $MANIFESTS_DIR не существует!"
  exit 1
fi

if [[ -z "$REGION" ]]; then
  REGION="eu-central-1"
fi

if [ "$ENV" == "dev" ]; then
  echo "Переключаем kubectl на Docker Desktop..."
  kubectl config use-context docker-desktop
elif [ "$ENV" == "prod" ]; then
  echo "Обновляем контекст для кластера $CLUSTER_NAME..."
  aws eks update-kubeconfig --region "$REGION" --name "$CLUSTER_NAME"

  echo "Проверяем, создан ли контекст..."
  CONTEXT_EXISTS=$(kubectl config get-contexts --output=name | grep "$CLUSTER_NAME" | head -n 1 || echo "")

  if [[ -z "$CONTEXT_EXISTS" ]]; then
    echo "Ошибка: Контекст для кластера $CLUSTER_NAME не был создан!"
    exit 1
  fi

  echo "Переключаемся на контекст $CONTEXT_EXISTS..."
  kubectl config use-context "$CONTEXT_EXISTS"
fi

if [ "$ACTION" == "update" ]; then
  echo "Обновление Weaviate для среды: $ENV"
  kubectl apply -k "$MANIFESTS_DIR"
  echo "Weaviate успешно обновлён для среды: $ENV"
  exit 0
fi

if [ "$ACTION" == "deploy" ]; then
  if [ "$ENV" == "dev" ]; then
    echo "Разворачиваем стек Weaviate для окружения: $ENV..."
    kubectl apply -k "$MANIFESTS_DIR"
    sleep 10

    echo "Ожидание запуска Weaviate..."
    while [[ $(kubectl get pods -l app=weaviate -o jsonpath='{.items[0].status.phase}' 2>/dev/null) != "Running" ]]; do
      echo "Weaviate еще запускается..."
      sleep 5
    done

    echo "Weaviate успешно запущен для окружения: $ENV"
    echo "API доступно по адресу: http://localhost:30080"
    echo "UI доступно по адресу: http://localhost:30077"

  elif [ "$ENV" == "prod" ]; then
    CLUSTER_EXISTS=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.status" --output text 2>/dev/null || echo "NotFound")
    NODEGROUPS=$(eksctl get nodegroup --cluster "$CLUSTER_NAME" -o json 2>/dev/null | jq -r '.[].Name' || echo "")
    ACTIVE_STACKS=$(aws cloudformation list-stacks --query "StackSummaries[?contains(StackName, '$CLUSTER_NAME') && StackStatus != 'DELETE_COMPLETE'].[StackName]" --output text || echo "")

    echo "Разворачиваем Weaviate в AWS EKS ($CLUSTER_NAME)..."
    echo "AWS Account ID: $AWS_ACCOUNT_ID"

    # Удаление старого кластера (если есть)
    if [[ "$CLUSTER_EXISTS" != "NotFound" ]]; then
      echo "Кластер $CLUSTER_NAME найден. Удаляем старый кластер..."
      eksctl delete cluster --name "$CLUSTER_NAME" --region "$REGION" --wait
    fi

    # Удаление старых NodeGroups
    if [[ -n "$NODEGROUPS" ]]; then
      for NODEGROUP in $NODEGROUPS; do
        eksctl delete nodegroup --cluster "$CLUSTER_NAME" --name "$NODEGROUP" --region "$REGION" --wait || true
      done
    fi

    # Удаление CloudFormation стэков (если остались после удаления EKS)
    if [[ -n "$ACTIVE_STACKS" ]]; then
      for STACK in $ACTIVE_STACKS; do
        echo "Удаляем стек $STACK..."
        aws cloudformation delete-stack --stack-name "$STACK" || true
        aws cloudformation wait stack-delete-complete --stack-name "$STACK" || echo "Ошибка удаления стэка: $STACK"
      done
    fi

    # Создание нового кластера
    eksctl create cluster --name "$CLUSTER_NAME" \
      --region "$REGION" \
      --nodegroup-name weaviate-nodes \
      --node-type t3.large \
      --nodes 3 \
      --nodes-min 2 \
      --nodes-max 5 \
      --managed

    eksctl utils associate-iam-oidc-provider --region "$REGION" --cluster "$CLUSTER_NAME" --approve
    eksctl create iamserviceaccount \
      --name ebs-csi-controller-sa \
      --namespace kube-system \
      --cluster "$CLUSTER_NAME" \
      --role-name AmazonEKS_EBS_CSI_DriverRole \
      --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
      --approve

    eksctl create addon --name aws-ebs-csi-driver --cluster "$CLUSTER_NAME" \
      --service-account-role-arn arn:aws:iam::"$AWS_ACCOUNT_ID":role/AmazonEKS_EBS_CSI_DriverRole --force

    kubectl apply -k "$MANIFESTS_DIR"

    # Ожидание запуска Weaviate
    sleep 10
    while [[ $(kubectl get pods -l app=weaviate -o jsonpath='{.items[0].status.phase}' 2>/dev/null) != "Running" ]]; do
      echo "Weaviate еще запускается..."
      sleep 5
    done

    # Получаем VPC ID для EKS
    VPC_ID=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.resourcesVpcConfig.vpcId" --output text)
    echo "VPC ID: $VPC_ID"

    # Получаем список Security Groups, используемых в EKS
    EKS_SECURITY_GROUPS=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.resourcesVpcConfig.securityGroupIds" --output json)
    echo "EKS Security Groups: $EKS_SECURITY_GROUPS"

    # Получаем список Subnets, привязанных к EKS
    SUBNET_IDS=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.resourcesVpcConfig.subnetIds" --output json)
    echo "EKS Subnets: $SUBNET_IDS"

    # Получаем список всех Security Groups в VPC
    ALL_SECURITY_GROUPS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query "SecurityGroups[*].GroupId" --output json)
    echo "All Security Groups in VPC: $ALL_SECURITY_GROUPS"

    # Выбираем первую доступную Security Group EKS
    EKS_SG=$(echo "$EKS_SECURITY_GROUPS" | jq -r '.[0]')
    if [[ -z "$EKS_SG" || "$EKS_SG" == "null" ]]; then
      echo "Ошибка: Не удалось найти Security Group для EKS!"
      exit 1
    fi
    echo "Используем Security Group: $EKS_SG"

    # Получаем Worker Nodes IPs
    WORKER_NODES_IPS=$(aws ec2 describe-instances \
      --filters "Name=vpc-id,Values=$VPC_ID" "Name=instance-state-name,Values=running" \
      --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)
    WEAVIATE_NODE_IP=$(echo "$WORKER_NODES_IPS" | head -n 1)
    echo "Weaviate доступен на ноде: $WEAVIATE_NODE_IP"

    # Проверяем существование Security Group перед настройкой правил
    if echo "$ALL_SECURITY_GROUPS" | grep -q "$EKS_SG"; then
      echo "Security Group $EKS_SG найден. Разрешаем трафик..."

      aws ec2 authorize-security-group-ingress \
        --group-id "$EKS_SG" \
        --protocol tcp --port 30080 \
        --cidr 10.0.0.0/16 || echo "Security Group уже настроен (30080)"

      aws ec2 authorize-security-group-ingress \
        --group-id "$EKS_SG" \
        --protocol tcp --port 30051 \
        --cidr 10.0.0.0/16 || echo "Security Group уже настроен (30051)"
    else
      echo "Ошибка: Security Group $EKS_SG не найдена!"
      exit 1
    fi

    # Обновляем конфигурацию kubectl
    aws eks update-kubeconfig --region "$REGION" --name "$CLUSTER_NAME"

    # Вывод информации
    echo "Weaviate развернут в AWS EKS ($CLUSTER_NAME)"
    echo "Lambda должна использовать URL: http://$WEAVIATE_NODE_IP:30080"
  else
    echo "Ошибка: Используйте 'dev' или 'prod'"
    exit 1
  fi
else
  echo "Ошибка: Доступные действия - 'update' или 'deploy'"
  exit 1
fi
