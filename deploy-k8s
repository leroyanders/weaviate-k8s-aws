#!/bin/bash

set -e

if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Ошибка: Укажите действие (update или deploy) и среду (dev или prod)"
  exit 1
fi

ACTION=$1
ENV=$2
K8S_DIR="k8s"
MANIFESTS_DIR="$K8S_DIR/$ENV/manifests"

if [[ ! -d "$MANIFESTS_DIR" ]]; then
  echo "Ошибка: Директория $MANIFESTS_DIR не существует!"
  exit 1
fi

if [[ -z "$REGION" ]]; then
    REGION="eu-central-1"
fi

CLUSTER_NAME="weaviate-cluster-$ENV"
REGION=${AWS_REGION:-$(aws configure get region)}
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
TIMEOUT=300
INTERVAL=5
ELAPSED=0

if [ "$ENV" == "dev" ]; then
    echo "Переключаем kubectl на Docker Desktop..."
    kubectl config use-context docker-desktop
elif [ "$ENV" == "prod" ]; then
    echo "Переключаем kubectl на AWS EKS ($CLUSTER_NAME)..."
    aws eks update-kubeconfig --region "$REGION" --name "$CLUSTER_NAME"
    kubectl config use-context "arn:aws:eks:$REGION:$AWS_ACCOUNT_ID:cluster/$CLUSTER_NAME"
fi

if [ "$ACTION" == "update" ]; then
  echo "Обновление Weaviate для среды: $ENV"
  kubectl apply -k "$MANIFESTS_DIR"
  echo "Weaviate успешно обновлён для среды: $ENV"
  exit 0
fi

if [ "$ACTION" == "deploy" ]; then
  if [ "$ENV" == "dev" ]; then
    echo "Разворачиваем стек Weaviate для окружения: $ENV..."
    kubectl apply -k "$MANIFESTS_DIR"
    sleep 10

    echo "Ожидание запуска Weaviate..."
    while [[ $(kubectl get pods -l app=weaviate -o jsonpath='{.items[0].status.phase}' 2>/dev/null) != "Running" ]]; do
      echo "Weaviate еще запускается..."
      sleep 5
    done

    echo "Weaviate успешно запущен для окружения: $ENV"
    echo "API доступно по адресу: http://localhost:30080"
    echo "UI доступно по адресу: http://localhost:30077"

  elif [ "$ENV" == "prod" ]; then
    CLUSTER_EXISTS=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.status" --output text 2>/dev/null || echo "NotFound")
    NODEGROUPS=$(eksctl get nodegroup --cluster "$CLUSTER_NAME" -o json 2>/dev/null | jq -r '.[].Name' || echo "")
    ACTIVE_STACKS=$(aws cloudformation list-stacks --query "StackSummaries[?contains(StackName, '$CLUSTER_NAME') && StackStatus != 'DELETE_COMPLETE'].[StackName]" --output text || echo "")
    VPC_ID=$(aws ec2 describe-vpcs --query "Vpcs[?Tags[?Key=='eksctl.cluster.k8s.io/v1alpha1/cluster-name' && Value=='$CLUSTER_NAME']].VpcId" --output text || echo "")
    UNUSED_EIPS=$(aws ec2 describe-addresses --query "Addresses[?AssociationId==null].AllocationId" --output text || echo "")

    echo "Разворачиваем Weaviate в AWS EKS ($CLUSTER_NAME)..."
    echo "AWS Account ID: $AWS_ACCOUNT_ID"

    if [[ "$CLUSTER_EXISTS" != "NotFound" ]]; then
      echo "Кластер $CLUSTER_NAME найден. Удаляем старый кластер..."
      eksctl delete cluster --name "$CLUSTER_NAME" --region "$REGION" --wait

      echo "Ожидаем удаления кластера..."
      while [[ "$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.status" --output text 2>/dev/null || echo "NotFound")" != "NotFound" ]]; do
        echo "Кластер еще существует, ждем..."
        sleep 10
      done
      echo "Кластер $CLUSTER_NAME успешно удален!"
    fi

    for NODEGROUP in $NODEGROUPS; do
      echo "Удаляем nodegroup: $NODEGROUP..."
      eksctl delete nodegroup --cluster "$CLUSTER_NAME" --name "$NODEGROUP" --region "$REGION" --wait || true
    done

    echo "Проверяем активные CloudFormation стэки..."
    for STACK in $ACTIVE_STACKS; do
      aws cloudformation delete-stack --stack-name "$STACK" || true
      sleep 2
      aws cloudformation wait stack-delete-complete --stack-name "$STACK" || echo "Ошибка удаления стэка: $STACK"
    done

    for EIP in $UNUSED_EIPS; do
      aws ec2 release-address --allocation-id "$EIP"
      echo "Elastic IP ($EIP) освобожден"
    done

    eksctl create cluster --name "$CLUSTER_NAME" \
      --region "$REGION" \
      --nodegroup-name weaviate-nodes \
      --node-type t3.large \
      --nodes 3 \
      --nodes-min 2 \
      --nodes-max 5 \
      --managed

    VPC_ID=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.resourcesVpcConfig.vpcId" --output text)
    SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query "Subnets[].SubnetId" --output json | jq -r 'join(", ")')

    aws eks update-kubeconfig --region "$REGION" --name "$CLUSTER_NAME"

    eksctl utils associate-iam-oidc-provider --region "$REGION" --cluster "$CLUSTER_NAME" --approve
    eksctl create iamserviceaccount \
      --name ebs-csi-controller-sa \
      --namespace kube-system \
      --cluster "$CLUSTER_NAME" \
      --role-name AmazonEKS_EBS_CSI_DriverRole \
      --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
      --approve

    eksctl create addon --name aws-ebs-csi-driver --cluster "$CLUSTER_NAME" \
        --service-account-role-arn arn:aws:iam::"$AWS_ACCOUNT_ID":role/AmazonEKS_EBS_CSI_DriverRole --force

    kubectl apply -k "$MANIFESTS_DIR"

    sleep 10
    while [[ $(kubectl get pods -l app=weaviate -o jsonpath='{.items[0].status.phase}' 2>/dev/null) != "Running" ]]; do
      echo "Weaviate еще запускается..."
      sleep 5
    done

    echo "VPC ID: $VPC_ID"
    echo "Subnet IDs: $SUBNET_IDS"
    echo "Weaviate развернут в AWS EKS ($CLUSTER_NAME)"
    echo "Доступен в VPC: http://weaviate.default.svc.cluster.local:8080"
    echo "Weaviate развернут в AWS EKS ($CLUSTER_NAME)"
  else
    echo "Ошибка: Используйте 'dev' или 'prod'"
    exit 1
  fi
else
  echo "Ошибка: Доступные действия - 'update' или 'deploy'"
  exit 1
fi
